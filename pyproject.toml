[tool.poetry]
name = "Smart-DevOps-Assistant"
version = "0.1.0"
description = "AI-powered DevOps assistant using PyTorch, FastAPI, and ML for intelligent log analysis"
authors = ["Gubanov Oleksandr <future.htm@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/Gubanov-Alex/Smart-DevOps-Assistant"
repository = "https://github.com/Gubanov-Alex/Smart-DevOps-Assistant.git"
documentation = "https://github.com/Gubanov-Alex//Smart-DevOps-Assistant/docs"
keywords = ["devops", "machine-learning", "fastapi", "pytorch", "anomaly-detection", "ai-assistant"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.115.12"
uvicorn = {extras = ["standard"], version = "^0.34.3"}
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
sqlalchemy = "^2.0.23"
alembic = "^1.13.0"
asyncpg = "^0.30.0"
redis = "^6.2.0"
celery = "^5.3.4"
torch = "^2.7.1"
scikit-learn = "^1.7.0"
numpy = "^2.2.6"
pandas = "^2.3.0"
httpx = "^0.28.1"
python-multipart = "^0.0.20"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
structlog = "^25.4.0"
prometheus-client = "^0.22.1"
pathlib = "^1.0.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.0"
pytest-asyncio = "^0.21.1"
pytest-cov = "^6.1.1"
pytest-mock = "^3.12.0"
pytest-benchmark = "^4.0.0"
black = "^25.1.0"
isort = "^6.0.1"
flake8 = "^7.2.0"
bandit = "^1.7.5"
safety = "^3.2.0"
pre-commit = "^4.2.0"
factory-boy = "^3.3.0"
types-redis = "^4.6.0"
types-requests = "^2.31.0"
psutil = {version = "^5.9.6", optional = true}
pydocstyle = "^6.3.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.8"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["app", "tests"]



[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    # "--benchmark-only",
    "--benchmark-sort=mean",
    "--benchmark-group-by=func",
    "--benchmark-warmup=on",
    "--benchmark-disable-gc",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmark tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "app/core/config.py",
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/__init__.py",
    "*/migrations/*",
    "app/main.py",
]
parallel = true
concurrency = ["thread"]

[tool.coverage.report]
precision = 2
fail_under = 60  #
show_missing = true
skip_covered = false
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]
