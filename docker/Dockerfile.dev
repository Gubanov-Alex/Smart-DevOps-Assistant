# Multi-stage Dockerfile for Smart DevOps Assistant
FROM python:3.12-slim AS base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache \
    POETRY_HOME="/opt/poetry" \
    POETRY_VERSION=1.8.3

# Install system dependencies and Poetry in one layer
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    libpq-dev \
    && pip install poetry==$POETRY_VERSION \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set work directory
WORKDIR /app

# Copy poetry files first (better caching)
COPY pyproject.toml poetry.lock ./

# Dependencies stage (heavily cached)
FROM base AS dependencies

# Install dependencies ONLY (exclude source code for better caching)
RUN poetry install --only main --no-root && rm -rf $POETRY_CACHE_DIR

# Development stage
FROM dependencies AS development

# Install dev dependencies
RUN poetry install --with dev --no-root && rm -rf $POETRY_CACHE_DIR

# Copy source code (separate layer for faster rebuilds)
COPY . .

# Create models directory
RUN mkdir -p models

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Development command
CMD ["poetry", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Production stage (smaller image)
FROM dependencies AS production

# Copy only necessary files (README.md optional)
COPY app/ ./app/
COPY --from=base /app/pyproject.toml ./

# Create non-root user
RUN useradd --create-home --shell /bin/bash --uid 1000 app && \
    chown -R app:app /app
USER app

# Production command
CMD ["poetry", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
