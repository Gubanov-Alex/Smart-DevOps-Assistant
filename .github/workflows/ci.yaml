name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * 0'

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.8.3"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/smart-devops-assistant

jobs:
  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      python: ${{ steps.filter.outputs.python }}
      docker: ${{ steps.filter.outputs.docker }}
      docs: ${{ steps.filter.outputs.docs }}
      config: ${{ steps.filter.outputs.config }}
      should_run_tests: ${{ steps.should_run.outputs.result }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            python:
              - '**/*.py'
              - 'pyproject.toml'
              - 'poetry.lock'
              - 'requirements*.txt'
            docker:
              - 'docker/**'
              - 'Dockerfile*'
              - 'docker-compose*.yaml'
            docs:
              - 'docs/**'
              - '**/*.md'
              - 'mkdocs.yml'
            config:
              - '.github/workflows/**'
              - 'scripts/**'
              - '*.yml'
              - '*.yaml'
              - '*.toml'

      - name: Determine if tests should run
        id: should_run
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || \
             [[ "${{ github.ref }}" == "refs/heads/develop" ]] || \
             [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || \
             [[ "${{ github.event_name }}" == "schedule" ]] || \
             [[ "${{ steps.filter.outputs.python }}" == "true" ]] || \
             [[ "${{ steps.filter.outputs.config }}" == "true" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
            echo "üöÄ Tests will run: critical branch, manual trigger, or relevant changes detected"
          else
            echo "result=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Tests skipped: docs-only changes on feature branch"
          fi

  # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.should_run_tests == 'true'
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        check: [format, lint, security-scan]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-${{ matrix.check }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-
            poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: poetry install --no-interaction --with dev

      - name: Run quality checks
        run: |
          case "${{ matrix.check }}" in
            format)
              echo "üé® Checking code formatting..."
              poetry run black --check --diff app/ tests/ || {
                echo "‚ùå Code formatting issues found. Run: poetry run black app/ tests/"
                exit 1
              }
              poetry run isort --check-only --diff app/ tests/ || {
                echo "‚ùå Import sorting issues found. Run
