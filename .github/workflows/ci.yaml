name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:  # Ручной запуск
  schedule:
    - cron: '0 2 * * 0'  # Weekly security scans

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.8.3"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-flight validation
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      python: ${{ steps.filter.outputs.python }}
      docker: ${{ steps.filter.outputs.docker }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            python:
              - '**/*.py'
              - 'pyproject.toml'
              - 'poetry.lock'
              - 'requirements*.txt'
            docker:
              - 'docker/**'
              - 'Dockerfile*'
              - 'docker-compose*.yaml'
            docs:
              - 'docs/**'
              - '**/*.md'
              - 'mkdocs.yml'

  # Code quality matrix
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        check: [format, lint, type-check, security-scan, docstring]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-${{ matrix.check }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-
            poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: poetry install --no-interaction --only dev

      - name: Run quality checks
        run: |
          case "${{ matrix.check }}" in
            format)
              echo "🎨 Checking code formatting..."
              poetry run black --check --diff app/ tests/
              poetry run isort --check-only --diff app/ tests/
              ;;
            lint)
              echo "🔍 Running linting..."
              poetry run flake8 app/ tests/
              ;;
            type-check)
              echo "🔎 Type checking..."
              poetry run mypy app/ --config-file pyproject.toml
              ;;
            security-scan)
              echo "🔒 Security scanning..."
              poetry run bandit -r app/ -f json -o bandit-report.json || echo "Bandit completed with issues"
              ;;
            docstring)
              echo "📝 Checking docstrings..."
              poetry run pydocstyle app/ --convention=google || echo "Docstring issues found"
              ;;
          esac

      - name: Upload security report
        if: matrix.check == 'security-scan' && always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 7

  # Application startup test
  app-health:
    name: Application Health
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-app
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Test application startup
        run: |
          poetry run python -c "
          try:
              # Test basic imports
              import app
              print('✅ App module imports successfully')
              
              # Test FastAPI app creation (if exists)
              try:
                  from app.main import app as fastapi_app
                  print('✅ FastAPI application creates successfully')
              except ImportError:
                  print('ℹ️  FastAPI app not found, skipping')
              
              print('🚀 Application health check passed')
          except Exception as e:
              print(f'❌ Application health check failed: {e}')
              exit(1)
          "

  # Test matrix
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: [changes, quality]
    if: needs.changes.outputs.python == 'true' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration, ml]
        include:
          - test-type: unit
            test-path: tests/unit/
            services: false
            coverage: true
          - test-type: integration
            test-path: tests/integration/
            services: true
            coverage: false
          - test-type: ml
            test-path: tests/ml/
            services: false
            coverage: false

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
        # Conditionally start services


      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379


    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-test
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Wait for services
        if: matrix.services
        run: |
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping | grep PONG; do sleep 1; done'

      - name: Run tests
        env:
          DATABASE_URL: ${{ matrix.services && 'postgresql://postgres:postgres@localhost:5432/test_db' || '' }}
          REDIS_URL: ${{ matrix.services && 'redis://localhost:6379/0' || '' }}
          ENVIRONMENT: testing
        run: |
          # Build test command
          CMD="poetry run pytest ${{ matrix.test-path }} -v --tb=short --maxfail=5"
          
          # Add coverage for unit tests
          if [[ "${{ matrix.coverage }}" == "true" ]]; then
            CMD="$CMD --cov=app --cov-report=xml:coverage-${{ matrix.test-type }}.xml --cov-report=html:htmlcov-${{ matrix.test-type }}"
          fi
          
          # Add benchmark exclusion for ML tests
          if [[ "${{ matrix.test-type }}" == "ml" ]]; then
            CMD="$CMD -m 'not benchmark'"
          fi
          
          # Add JUnit XML for all tests
          CMD="$CMD --junit-xml=junit-${{ matrix.test-type }}.xml"
          
          echo "Running: $CMD"
          eval $CMD

      - name: Upload coverage
        if: matrix.coverage && success()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.test-type }}
          name: ${{ matrix.test-type }}-coverage
          fail_ci_if_error: false

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            junit-${{ matrix.test-type }}.xml
            htmlcov-${{ matrix.test-type }}/
            coverage-${{ matrix.test-type }}.xml
          retention-days: 7

  # ML Performance Benchmarks
  benchmarks:
    name: ML Benchmarks
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: needs.changes.outputs.python == 'true' && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run performance benchmarks
        run: |
          poetry run pytest tests/ml/ -v \
            -m benchmark \
            --benchmark-json=benchmark-results.json \
            --benchmark-compare-fail=min:5% \
            --benchmark-compare-fail=mean:10% \
            --benchmark-disable-gc \
            --benchmark-warmup=on

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: ml-benchmark-results
          path: benchmark-results.json
          retention-days: 30

  # Security scanning
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true' || github.event_name == 'schedule'
    timeout-minutes: 15
    permissions:
      security-events: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:

  # Docker build and security
  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [changes, quality, test]
    if: needs.changes.outputs.docker == 'true' || github.ref == 'refs/heads/main'
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Builds
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.dev
          target: development
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Run Trivy container scan
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'container-trivy-results.sarif'

      - name: Upload container scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'container-trivy-results.sarif'

  # Deployment gate
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, test, app-health, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.smart-devops-assistant.com
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          # TODO: Add actual deployment commands
          # kubectl apply -f k8s/staging/
          # helm upgrade smart-devops-staging ./charts/smart-devops-assistant

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests..."
          sleep 5  # Wait for deployment
          # TODO: Add actual smoke tests
          # curl -f https://staging.smart-devops-assistant.com/health

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Staging deployment: ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Environment: https://staging.smart-devops-assistant.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Production deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, test, app-health, security, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://smart-devops-assistant.com
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "Version: ${{ github.sha }}"
          # TODO: Add actual deployment commands
          # kubectl apply -f k8s/production/
          # helm upgrade smart-devops-prod ./charts/smart-devops-assistant

      - name: Run production smoke tests
        run: |
          echo "🧪 Running production smoke tests..."
          sleep 10  # Wait for deployment
          # TODO: Add comprehensive health checks
          # ./scripts/production-health-check.sh

      - name: Notify production deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#production-deployments'
          text: |
            🚀 Production deployment: ${{ job.status }}
            Version: ${{ github.sha }}
            Author: ${{ github.actor }}
            Environment: https://smart-devops-assistant.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-deployment monitoring
  post-deploy-monitoring:
    name: Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 30

    steps:
      - name: Monitor application health
        run: |
          echo "📊 Monitoring application health for 5 minutes..."
          # TODO: Add monitoring checks
          # ./scripts/monitor-health.sh --duration=300

      - name: Run load tests
        run: |
          echo "⚡ Running load tests..."
          # TODO: Add load testing
          # k6 run scripts/load-test.js

      - name: Alert on performance regression
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          text: |
            🚨 Performance regression detected after deployment
            Version: ${{ github.sha }}
            Please check application metrics immediately
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
