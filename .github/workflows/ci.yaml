name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * 0'

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.8.3"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/smart-devops-assistant

jobs:
  # Определяем изменения в коде
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      python: ${{ steps.filter.outputs.python }}
      docker: ${{ steps.filter.outputs.docker }}
      docs: ${{ steps.filter.outputs.docs }}
      config: ${{ steps.filter.outputs.config }}
      should_run_tests: ${{ steps.should_run.outputs.result }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            python:
              - '**/*.py'
              - 'pyproject.toml'
              - 'poetry.lock'
              - 'requirements*.txt'
            docker:
              - 'docker/**'
              - 'Dockerfile*'
              - 'docker-compose*.yaml'
            docs:
              - 'docs/**'
              - '**/*.md'
              - 'mkdocs.yml'
            config:
              - '.github/workflows/**'
              - 'scripts/**'
              - '*.yml'
              - '*.yaml'
              - '*.toml'

      - name: Determine if tests should run
        id: should_run
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || \
             [[ "${{ github.ref }}" == "refs/heads/develop" ]] || \
             [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || \
             [[ "${{ github.event_name }}" == "schedule" ]] || \
             [[ "${{ steps.filter.outputs.python }}" == "true" ]] || \
             [[ "${{ steps.filter.outputs.config }}" == "true" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
            echo "🚀 Tests will run: critical branch, manual trigger, or relevant changes detected"
          else
            echo "result=false" >> $GITHUB_OUTPUT
            echo "⏭️ Tests skipped: docs-only changes on feature branch"
          fi

  # Базовые проверки качества
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.should_run_tests == 'true'
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        check: [format, lint, security-scan]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-${{ matrix.check }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-
            poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: poetry install --no-interaction --with dev

      - name: Run quality checks
        run: |
          case "${{ matrix.check }}" in
            format)
              echo "🎨 Checking code formatting..."
              poetry run black --check --diff app/ tests/ || {
                echo "❌ Code formatting issues found. Run: poetry run black app/ tests/"
                exit 1
              }
              poetry run isort --check-only --diff app/ tests/ || {
                echo "❌ Import sorting issues found. Run: poetry run isort app/ tests/"
                exit 1
              }
              ;;
            lint)
              echo "🔍 Running linting..."
              poetry run flake8 app/ tests/ --max-complexity=10 --max-line-length=88
              ;;
            security-scan)
              echo "🔒 Security scanning..."
              poetry run bandit -r app/ -f json -o bandit-report.json -ll
              ;;
          esac

      - name: Upload security report
        if: matrix.check == 'security-scan' && always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 7

  # Application health check
  app-health:
    name: Application Health
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.should_run_tests == 'true'
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-app
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Test application startup
        timeout-minutes: 3
        run: |
          poetry run python -c "
          import sys
          import time
          try:
              start_time = time.time()
              
              # Test basic imports
              print('✅ Testing basic imports...')
              import importlib
              
              # Test dependencies
              import sqlalchemy, redis, celery
              print('✅ Core dependencies available')
              
              elapsed = time.time() - start_time
              print(f'⚡ Import time: {elapsed:.2f}s')
              
              if elapsed > 10:
                  print('⚠️  Slow import detected')
                  
          except Exception as e:
              print(f'❌ Health check failed: {e}')
              sys.exit(1)
          "

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [changes, quality]
    if: needs.changes.outputs.should_run_tests == 'true'
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-unit
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run unit tests
        env:
          ENVIRONMENT: testing
        run: |
          poetry run pytest tests/ \
            --cov=app \
            --cov-report=xml:coverage-unit.xml \
            --cov-report=html:htmlcov-unit \
            --cov-report=term-missing \
            --cov-fail-under=75 \
            --junit-xml=junit-unit.xml \
            -v --tb=short --maxfail=5 \
            --durations=10

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage-unit.xml
          flags: unit
          name: unit-tests-coverage
          fail_ci_if_error: false

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            junit-unit.xml
            htmlcov-unit/
            coverage-unit.xml
          retention-days: 7

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [changes, quality]
    if: needs.changes.outputs.should_run_tests == 'true'
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools postgresql-client

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-integration
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Wait for services
        run: |
          echo "🔄 Waiting for services to be ready..."
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
          echo "✅ Services are ready"

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: testing
        run: |
          # Создаем директорию если не существует
          mkdir -p tests/integration
          # Если нет тестов, создаем пустой результат
          if [ ! -f "tests/integration/test_*.py" ]; then
            echo "ℹ️ No integration tests found, creating empty result"
            touch junit-integration.xml
          else
            poetry run pytest tests/integration/ \
              --junit-xml=junit-integration.xml \
              -v --tb=short --maxfail=5 \
              --durations=10
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: junit-integration.xml
          retention-days: 7

  # Security scanning
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.should_run_tests == 'true' || 
      github.event_name == 'schedule'
    timeout-minutes: 20
    permissions:
      security-events: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          config: |
            paths:
              - app/
            paths-ignore:
              - tests/
              - migrations/
              - docs/

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  # Docker build
  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [changes, quality, unit-tests]
    if: |
      needs.changes.outputs.docker == 'true' || 
      needs.changes.outputs.python == 'true' || 
      github.ref == 'refs/heads/main'
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            latest=auto
            prefix=
            suffix=  

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Notification and metrics jobs
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests]
    if: always()
    steps:
      - name: Notify Success
        if: needs.quality.result == 'success' && needs.unit-tests.result == 'success'
        run: |
          echo "✅ Pipeline успешно завершен!"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration: ${{ needs.integration-tests.result }}"
          
      - name: Notify Failure
        if: failure()
        run: |
          echo "❌ Pipeline завершился с ошибкой"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"

  collect-metrics:
    name: Collect Pipeline Metrics
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests]
    if: always()
    steps:
      - name: Pipeline Metrics
        run: |
          echo "📊 Pipeline Metrics:"
          echo "Quality Status: ${{ needs.quality.result }}"
          echo "Unit Tests Status: ${{ needs.unit-tests.result }}"
          echo "Integration Tests Status: ${{ needs.integration-tests.result }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Event: ${{ github.event_name }}"
